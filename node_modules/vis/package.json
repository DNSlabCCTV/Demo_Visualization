{
  "_from": "vis",
  "_id": "vis@4.21.0",
  "_inBundle": false,
  "_integrity": "sha1-3XFji/9/ZJXQC8n0DCU1JhM97Ws=",
  "_location": "/vis",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vis",
    "fetchSpec": "latest",
    "name": "vis",
    "raw": "vis",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vis/-/vis-4.21.0.tgz",
  "_shasum": "dd71638bff7f6495d00bc9f40c253526133ded6b",
  "_spec": "vis",
  "_where": "C:\\Users\\Han\\Desktop\\KOREN\\topology\\vis-4.21.0\\examples\\network\\data",
  "bugs": {
    "url": "https://github.com/almende/vis/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "emitter-component": "^1.1.1",
    "hammerjs": "^2.0.8",
    "keycharm": "^0.2.0",
    "moment": "^2.18.1",
    "propagating-hammerjs": "^1.4.6"
  },
  "deprecated": false,
  "description": "A dynamic, browser-based visualization library.",
  "devDependencies": {
    "async": "^2.5.0",
    "babel-core": "^6.25.0",
    "babel-loader": "^7.1.1",
    "babel-plugin-transform-es3-member-expression-literals": "^6.22.0",
    "babel-plugin-transform-es3-property-literals": "^6.22.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-runtime": "^6.23.0",
    "babelify": "^7.3.0",
    "canvas": "^1.6.5",
    "clean-css": "^4.1.7",
    "eslint": "^4.3.0",
    "gulp": "^3.9.1",
    "gulp-clean-css": "^3.7.0",
    "gulp-concat": "^2.6.1",
    "gulp-eslint": "^4.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-util": "^3.0.8",
    "jsdom": "9.12.0",
    "jsdom-global": "^2.1.1",
    "merge-stream": "^1.0.1",
    "mocha": "^3.4.2",
    "mocha-jsdom": "^1.1.0",
    "rimraf": "^2.6.1",
    "test-console": "^1.0.0",
    "uglify-js": "^2.8.29",
    "uuid": "^3.1.0",
    "webpack": "^3.3.0",
    "yargs": "^8.0.2"
  },
  "homepage": "http://visjs.org/",
  "keywords": [
    "browser",
    "browser based",
    "chart",
    "graph",
    "javascript",
    "linechart",
    "network",
    "timeline",
    "vis",
    "visualization",
    "web based"
  ],
  "license": "(Apache-2.0 OR MIT)",
  "main": "./dist/vis.js",
  "name": "vis",
  "optionalDependencies": {},
  "readme": "# vis.js\n\n[![Join the chat at https://gitter.im/vis-js/Lobby](https://badges.gitter.im/vis-js/Lobby.svg)](https://gitter.im/vis-js/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<a href=\"https://github.com/almende/vis/blob/develop/misc/we_need_help.md\">\n  <img align=\"right\" src=\"https://raw.githubusercontent.com/almende/vis/master/misc/we_need_help.png\">\n</a>\n\nVis.js is a dynamic, browser based visualization library.\nThe library is designed to be easy to use, handle large amounts\nof dynamic data, and enable manipulation of the data.\nThe library consists of the following components:\n\n- DataSet and DataView. A flexible key/value based data set. Add, update, and\n  remove items. Subscribe on changes in the data set. A DataSet can filter and\n  order items, and convert fields of items.\n- DataView. A filtered and/or formatted view on a DataSet.\n- Graph2d. Plot data on a timeline with lines or barcharts.\n- Graph3d. Display data in a three dimensional graph.\n- Network. Display a network (force directed graph) with nodes and edges.\n- Timeline. Display different types of data on a timeline.\n\nThe vis.js library was initially developed by [Almende B.V](http://almende.com).\n\n## Badges\n\n[![NPM](https://nodei.co/npm/vis.png?downloads=true&downloadRank=true)](https://nodei.co/npm/vis/)\n\n[![Dependency Status](https://david-dm.org/almende/vis/status.svg)](https://david-dm.org/almende/vis)\n[![devDependency Status](https://david-dm.org/almende/vis/dev-status.svg)](https://david-dm.org/almende/vis?type=dev)\n\n[![last version on CDNJS](https://img.shields.io/cdnjs/v/vis.svg)](https://cdnjs.com/libraries/vis)\n[![GitHub contributors](https://img.shields.io/github/contributors/almende/vis.svg)](https://github.com/almende/vis/graphs/contributors)\n[![GitHub stars](https://img.shields.io/github/stars/almende/vis.svg)](https://github.com/almende/vis/stargazers)\n\n[![GitHub issues](https://img.shields.io/github/issues/almende/vis.svg)](https://github.com/almende/vis/issues)\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/almende/vis.svg)](http://isitmaintained.com/project/almende/vis \"Percentage of issues still open\")\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/almende/vis.svg)](http://isitmaintained.com/project/almende/vis \"Average time to resolve an issue\")\n[![Pending Pull-Requests](http://githubbadges.herokuapp.com/almende/vis/pulls.svg)](https://github.com/almende/vis/pulls)\n\n[![Code Climate](https://codeclimate.com/github/almende/vis/badges/gpa.svg)](https://codeclimate.com/github/almende/vis) \n\n## Install\n\nInstall via npm:\n\n    $ npm install vis\n\nInstall via bower:\n\n    $ bower install vis\n\nLink via cdnjs: http://cdnjs.com\n\nOr download the library from the github project:\n[https://github.com/almende/vis.git](https://github.com/almende/vis.git).\n\n## Load\n\nTo use a component, include the javascript and css files of vis in your web page:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script src=\"webroot/vis/dist/vis.js\"></script>\n  <link href=\"webroot/vis/dist/vis.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  <script type=\"text/javascript\">\n    // ... load a visualization\n  </script>\n</body>\n</html>\n```\n\nor load vis.js using require.js. Note that vis.css must be loaded too.\n\n```js\nrequire.config({\n  paths: {\n    vis: 'path/to/vis/dist',\n  }\n});\nrequire(['vis'], function (math) {\n  // ... load a visualization\n});\n```\n\n\nA timeline can be instantiated as:\n\n```js\nvar timeline = new vis.Timeline(container, data, options);\n```\n\nWhere `container` is an HTML element, `data` is an Array with data or a DataSet,\nand `options` is an optional object with configuration options for the\ncomponent.\n\n\n## Example\n\nA basic example on loading a Timeline is shown below. More examples can be\nfound in the [examples directory](https://github.com/almende/vis/tree/master/examples)\nof the project.\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>Timeline basic demo</title>\n  <script src=\"vis/dist/vis.js\"></script>\n  <link href=\"vis/dist/vis.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n  <style type=\"text/css\">\n    body, html {\n      font-family: sans-serif;\n    }\n  </style>\n</head>\n<body>\n<div id=\"visualization\"></div>\n\n<script type=\"text/javascript\">\n  var container = document.getElementById('visualization');\n  var data = [\n    {id: 1, content: 'item 1', start: '2013-04-20'},\n    {id: 2, content: 'item 2', start: '2013-04-14'},\n    {id: 3, content: 'item 3', start: '2013-04-18'},\n    {id: 4, content: 'item 4', start: '2013-04-16', end: '2013-04-19'},\n    {id: 5, content: 'item 5', start: '2013-04-25'},\n    {id: 6, content: 'item 6', start: '2013-04-27'}\n  ];\n  var options = {};\n  var timeline = new vis.Timeline(container, data, options);\n</script>\n</body>\n</html>\n```\n\n## Build\n\nTo build the library from source, clone the project from github\n\n    $ git clone git://github.com/almende/vis.git\n\nThe source code uses the module style of node (require and module.exports) to\norganize dependencies. To install all dependencies and build the library,\nrun `npm install` in the root of the project.\n\n    $ cd vis\n    $ npm install\n\nThen, the project can be build running:\n\n    $ npm run build\n\nTo automatically rebuild on changes in the source files, once can use\n\n    $ npm run watch\n\nThis will both build and minify the library on changes. Minifying is relatively\nslow, so when only the non-minified library is needed, one can use the\n`watch-dev` script instead:\n\n    $ npm run watch-dev\n\n## Custom builds\n\nThe folder `dist` contains bundled versions of vis.js for direct use in the browser. These bundles contain all the visualizations and include external dependencies such as *hammer.js* and *moment.js*.\n\nThe source code of vis.js consists of commonjs modules, which makes it possible to create custom bundles using tools like [Browserify](http://browserify.org/) or [Webpack](http://webpack.github.io/). This can be bundling just one visualization like the Timeline, or bundling vis.js as part of your own browserified web application.\n\n*Note that hammer.js version 2 is required as of v4.*\n\n### Prerequisites\n\nBefore you can do a build:\n\n- Install *node.js* and *npm* on your system: https://nodejs.org/\n- Install the following modules using npm: `browserify`, `babelify`, and `uglify-js`:\n\n  ```\n  $ [sudo] npm install -g browserify babelify uglify-js\n  ```\n\n- Download or clone the vis.js project:\n\n  ```\n  $ git clone https://github.com/almende/vis.git\n  ```\n\n- Install the dependencies of vis.js by running `npm install` in the root of the project:\n\n  ```\n  $ cd vis\n  $ npm install\n  ```\n\n### Examples of custom builds\n\n#### Example 1: Bundle only a single visualization type\n\nFor example, to create a bundle with just the Timeline and DataSet, create an index file named **custom.js** in the root of the project, containing:\n\n```js\nexports.DataSet = require('./lib/DataSet');\nexports.Timeline = require('./lib/timeline/Timeline');\n```\n\nThen create a custom bundle using browserify, like:\n\n    $ browserify custom.js -t [ babelify --presets [es2015] ] -o dist/vis-custom.js -s vis\n\nThis will generate a custom bundle *vis-custom.js*, which exposes the namespace `vis` containing only `DataSet` and `Timeline`. The generated bundle can be minified using uglifyjs:\n\n    $ uglifyjs dist/vis-custom.js -o dist/vis-custom.min.js\n\nThe custom bundle can now be loaded like:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <script src=\"dist/vis-custom.min.js\"></script>\n  <link href=\"dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n#### Example 2: Exclude external libraries\n\nThe default bundle `vis.js` is standalone and includes external dependencies such as *hammer.js* and *moment.js*. When these libraries are already loaded by the application, vis.js does not need to include these dependencies itself too. To build a custom bundle of vis.js excluding *moment.js* and *hammer.js*, run browserify in the root of the project:\n\n    $ browserify index.js -t [ babelify --presets [es2015] ] -o dist/vis-custom.js -s vis -x moment -x hammerjs\n\nThis will generate a custom bundle *vis-custom.js*, which exposes the namespace `vis`, and has *moment.js* and *hammer.js* excluded. The generated bundle can be minified with uglifyjs:\n\n    $ uglifyjs dist/vis-custom.js -o dist/vis-custom.min.js\n\nThe custom bundle can now be loaded as:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <!-- load external dependencies -->\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"></script>\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js\"></script>\n\n  <!-- load vis.js -->\n  <script src=\"dist/vis-custom.min.js\"></script>\n  <link href=\"dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n#### Example 3: Bundle vis.js as part of your (commonjs) application\n\nWhen writing a web application with commonjs modules, vis.js can be packaged automatically into the application. Create a file **app.js** containing:\n\n```js\nvar moment = require('moment');\nvar DataSet = require('vis/lib/DataSet');\nvar Timeline = require('vis/lib/timeline/Timeline');\n\nvar container = document.getElementById('visualization');\nvar data = new DataSet([\n  {id: 1, content: 'item 1', start: moment('2013-04-20')},\n  {id: 2, content: 'item 2', start: moment('2013-04-14')},\n  {id: 3, content: 'item 3', start: moment('2013-04-18')},\n  {id: 4, content: 'item 4', start: moment('2013-04-16'), end: moment('2013-04-19')},\n  {id: 5, content: 'item 5', start: moment('2013-04-25')},\n  {id: 6, content: 'item 6', start: moment('2013-04-27')}\n]);\nvar options = {};\nvar timeline = new Timeline(container, data, options);\n```\n\nThe application can be bundled and minified:\n\n    $ browserify app.js -o dist/app-bundle.js -t babelify\n    $ uglifyjs dist/app-bundle.js -o dist/app-bundle.min.js\n\nAnd loaded into a webpage:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <link href=\"node_modules/vis/dist/vis.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body>\n  <div id=\"visualization\"></div>\n  <script src=\"dist/app-bundle.min.js\"></script>\n</body>\n</html>\n```\n\n#### Example 4: Integrate vis.js components directly in your webpack build\n\nYou can integrate e.g. the timeline component directly in you webpack build.\nTherefor you can e.g. import the component-files from root direcory (starting with \"index-\").\n\n```js\nimport { DataSet, Timeline } from 'vis/index-timeline-graph2d';\n\nvar container = document.getElementById('visualization');\nvar data = new DataSet();\nvar timeline = new Timeline(container, data, {});\n```\n\nTo get this to work you'll need to add some babel-loader-setting to your webpack-config:\n\n```js\nmodule: {\n  module: {\n    rules: [{\n      test: /node_modules[\\\\\\/]vis[\\\\\\/].*\\.js$/,\n      loader: 'babel-loader',\n      query: {\n        cacheDirectory: true,\n        presets: [ \"babel-preset-es2015\" ].map(require.resolve),\n        plugins: [\n          \"transform-es3-property-literals\", // #2452\n          \"transform-es3-member-expression-literals\", // #2566\n          \"transform-runtime\" // #2566\n        ]\n      }\n    }]\n  }\n}\n```\n\nThere is also an [demo-project](https://github.com/mojoaxel/vis-webpack-demo) showing the integration of vis.js using webpack.\n\n## Test\n\nTo test the library, install the project dependencies once:\n\n    $ npm install\n\nThen run the tests:\n\n    $ npm run test\n\n## License\n\nCopyright (C) 2010-2017 Almende B.V. and Contributors\n\nVis.js is dual licensed under both\n\n  * The Apache 2.0 License\n    http://www.apache.org/licenses/LICENSE-2.0\n\nand\n\n  * The MIT License\n    http://opensource.org/licenses/MIT\n\nVis.js may be distributed under either license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/almende/vis.git"
  },
  "scripts": {
    "build": "gulp",
    "lint": "gulp lint",
    "test": "mocha --compilers js:babel-core/register",
    "watch": "gulp watch",
    "watch-dev": "gulp watch --bundle"
  },
  "version": "4.21.0"
}
