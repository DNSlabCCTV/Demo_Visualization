{
  "_from": "express-mysql-session",
  "_id": "express-mysql-session@2.0.1",
  "_inBundle": false,
  "_integrity": "sha512-smjlpO21HIMVThEOU+17uU0XurCLRYz1n7/baJVkuyIEcqZIWlOj8vi8mob71wfHhjYfolNULKfzrDOhTTOQDA==",
  "_location": "/express-mysql-session",
  "_phantomChildren": {
    "cookie-signature": "1.0.6",
    "depd": "1.1.2",
    "on-headers": "1.0.1",
    "parseurl": "1.3.2",
    "random-bytes": "1.0.0"
  },
  "_requested": {
    "escapedName": "express-mysql-session",
    "fetchSpec": "latest",
    "name": "express-mysql-session",
    "raw": "express-mysql-session",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-mysql-session/-/express-mysql-session-2.0.1.tgz",
  "_shasum": "27c11a83d3b0843d0ee48f0df51b86cb969355ef",
  "_spec": "express-mysql-session",
  "_where": "C:\\Users\\Han\\Desktop\\KOREN\\topology\\vis-4.21.0\\examples\\network\\data",
  "author": {
    "email": "chill@degreesofzero.com",
    "name": "Charles Hill"
  },
  "bugs": {
    "url": "https://github.com/chill117/express-mysql-session/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "3.1.0",
    "express-session": "1.15.6",
    "mysql": "2.16.0",
    "underscore": "1.9.1"
  },
  "deprecated": false,
  "description": "A MySQL session store for express.js",
  "devDependencies": {
    "async": "2.6.1",
    "benchmark": "2.1.4",
    "body-parser": "1.18.3",
    "chai": "4.1.2",
    "cookie-parser": "1.4.3",
    "express": "4.16.3",
    "grunt": "1.0.3",
    "grunt-eslint": "21.0.0",
    "grunt-mocha-test": "0.13.3",
    "load-grunt-config": "0.19.2",
    "mocha": "5.2.0",
    "mysql2": "1.6.1",
    "time-grunt": "1.4.0"
  },
  "homepage": "https://github.com/chill117/express-mysql-session#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "express-mysql-session",
  "optionalDependencies": {},
  "readme": "# express-mysql-session\n\nA MySQL session store for [express.js](http://expressjs.com/).\n\n[![Build Status](https://travis-ci.org/chill117/express-mysql-session.svg?branch=master)](https://travis-ci.org/chill117/express-mysql-session) [![Status of Dependencies](https://david-dm.org/chill117/express-mysql-session.svg)](https://david-dm.org/chill117/express-mysql-session)\n\n\n## Installation\n\nAdd to your application via `npm`:\n```\nnpm install express-mysql-session --save\n```\nThis will install `express-mysql-session` and add it to your application's `package.json` file.\n\n\n## Important Notes\n\nPotential gotchas and other important information goes here.\n\n### Older Versions\n\nFor users who are still using express-mysql-session `0.x`. Changes have been made to the constructor, which are backwards compatible, but you could run into troubles if using an older version of this module with the latest documentation. You can find the documentation for the older version [here](https://github.com/chill117/express-mysql-session/tree/9fbcf51416a00a7a525c1e6e431033125a2945b0).\n\n### Session Table Collation\n\nThis module creates a database table to save session data. This data is stored in a MySQL text field with the [utf8mb4](https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html) collation - added in [MySQL 5.5.3](https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html). The reason for this is to fully support the utf8 character set. If you absolutely must use an older version of MySQL, create your sessions table before initializing the `MySQLStore`.\n\n\n## How to Use\n\nUse with your express session middleware, like this:\n```js\nvar express = require('express');\nvar app = module.exports = express();\nvar session = require('express-session');\nvar MySQLStore = require('express-mysql-session')(session);\n\nvar options = {\n\thost: 'localhost',\n\tport: 3306,\n\tuser: 'session_test',\n\tpassword: 'password',\n\tdatabase: 'session_test'\n};\n\nvar sessionStore = new MySQLStore(options);\n\napp.use(session({\n\tkey: 'session_cookie_name',\n\tsecret: 'session_cookie_secret',\n\tstore: sessionStore,\n\tresave: false,\n\tsaveUninitialized: false\n}));\n```\n\nThe session store will internally create a `mysql` [connection pool](https://github.com/mysqljs/mysql#pooling-connections) which handles the (re)connection to the database. By default, the pool consists of 1 connection, but you can override this using the `connectionLimit` option. There are additional [pool options](https://github.com/mysqljs/mysql#pool-options) you can provide, which will be passed to the constructor of the `mysql` connection pool.\n\nThe sessions database table should be automatically created, when using default options. If for whatever reason the table is not created, you can find the schema [here](https://github.com/chill117/express-mysql-session/blob/master/schema.sql).\n\n### With an existing MySQL connection or pool\n\nTo pass in an existing MySQL database connection or pool, you would do something like this:\n```js\nvar mysql = require('mysql');\nvar session = require('express-session');\nvar MySQLStore = require('express-mysql-session')(session);\n\nvar options = {\n    host: 'localhost',\n    port: 3306,\n    user: 'db_user',\n    password: 'password',\n    database: 'db_name'\n};\n\nvar connection = mysql.createConnection(options); // or mysql.createPool(options);\nvar sessionStore = new MySQLStore({}/* session store options */, connection);\n```\n\n### Closing the session store\n\nTo cleanly close the session store:\n```js\nsessionStore.close();\n```\n\n\n### Options\n\nHere is a list of all available options:\n```js\nvar options = {\n\t// Host name for database connection:\n\thost: 'localhost',\n\t// Port number for database connection:\n\tport: 3306,\n\t// Database user:\n\tuser: 'session_test',\n\t// Password for the above database user:\n\tpassword: 'password',\n\t// Database name:\n\tdatabase: 'session_test',\n\t// Whether or not to automatically check for and clear expired sessions:\n\tclearExpired: true,\n\t// How frequently expired sessions will be cleared; milliseconds:\n\tcheckExpirationInterval: 900000,\n\t// The maximum age of a valid session; milliseconds:\n\texpiration: 86400000,\n\t// Whether or not to create the sessions database table, if one does not already exist:\n\tcreateDatabaseTable: true,\n\t// Number of connections when creating a connection pool:\n\tconnectionLimit: 1,\n\t// Whether or not to end the database connection when the store is closed.\n\t// The default value of this option depends on whether or not a connection was passed to the constructor.\n\t// If a connection object is passed to the constructor, the default value for this option is false.\n\tendConnectionOnClose: true,\n\tcharset: 'utf8mb4_bin',\n\tschema: {\n\t\ttableName: 'sessions',\n\t\tcolumnNames: {\n\t\t\tsession_id: 'session_id',\n\t\t\texpires: 'expires',\n\t\t\tdata: 'data'\n\t\t}\n\t}\n};\n```\n\n\n#### Configurable sessions table and column names\n\nYou can override the default sessions database table name and column names via the `schema` option:\n\n```js\nvar session = require('express-session');\nvar MySQLStore = require('express-mysql-session')(session);\n\nvar options = {\n\thost: 'localhost',\n\tport: 3306,\n\tuser: 'session_test',\n\tpassword: 'password',\n\tdatabase: 'session_test',\n\tschema: {\n\t\ttableName: 'custom_sessions_table_name',\n\t\tcolumnNames: {\n\t\t\tsession_id: 'custom_session_id',\n\t\t\texpires: 'custom_expires_column_name',\n\t\t\tdata: 'custom_data_column_name'\n\t\t}\n\t}\n};\n\nvar sessionStore = new MySQLStore(options);\n```\n\n\n### Debugging\n\n`express-mysql-session` uses the [debug module](https://github.com/visionmedia/debug) to output debug messages to the console. To output all debug messages, run your node app with the `DEBUG` environment variable:\n```\nDEBUG=express-mysql-session* node your-app.js\n```\nThis will output log messages as well as error messages from `express-mysql-session`.\n\nIf you also might need MySQL-related debug and error messages, see [debugging node-mysql](https://github.com/mysqljs/mysql#debugging-and-reporting-problems).\n\n\n## Contributing\n\nThere are a number of ways you can contribute:\n\n* **Improve or correct the documentation** - All the documentation is in this readme file. If you see a mistake, or think something should be clarified or expanded upon, please [submit a pull request](https://github.com/chill117/express-mysql-session/pulls/new)\n* **Report a bug** - Please review [existing issues](https://github.com/chill117/express-mysql-session/issues) before submitting a new one; to avoid duplicates. If you can't find an issue that relates to the bug you've found, please [create a new one](https://github.com/chill117/express-mysql-session/issues).\n* **Request a feature** - Again, please review the [existing issues](https://github.com/chill117/express-mysql-session/issues) before posting a feature request. If you can't find an existing one that covers your feature idea, please [create a new one](https://github.com/chill117/express-mysql-session/issues).\n* **Fix a bug** - Have a look at the [existing issues](https://github.com/chill117/express-mysql-session/issues) for the project. If there's a bug in there that you'd like to tackle, please feel free to do so. I would ask that when fixing a bug, that you first create a failing test that proves the bug. Then to fix the bug, make the test pass. This should hopefully ensure that the bug never creeps into the project again. After you've done all that, you can [submit a pull request](https://github.com/chill117/express-mysql-session/pulls/new) with your changes.\n\nBefore you contribute code, please read through at least some of the source code for the project. I would appreciate it if any pull requests for source code changes follow the coding style of the rest of the project.\n\nNow if you're still interested, you'll need to get your local environment configured.\n\n\n### Configure Local Environment\n\n#### Step 1: Get the Code\n\nFirst, you'll need to pull down the code from GitHub:\n```\ngit clone https://github.com/chill117/express-mysql-session.git\n```\n\n#### Step 2: Install Dependencies\n\nSecond, you'll need to install the project dependencies as well as the dev dependencies. To do this, simply run the following from the directory you created in step 1:\n```\nnpm install\n```\n\n#### Step 3: Set Up the Test Database\n\nNow, you'll need to set up a local test database:\n```js\n{\n\thost: 'localhost',\n\tport: 3306,\n\tuser: 'session_test',\n\tpassword: 'password',\n\tdatabase: 'session_test'\n};\n```\n*The test database settings are located in [test/config.js](https://github.com/chill117/express-mysql-session/blob/master/test/config.js)*\n\nAlternatively, you can provide custom database configurations via environment variables:\n```\nDB_HOST=\"localhost\"\nDB_PORT=\"3306\"\nDB_USER=\"session_test\"\nDB_PASS=\"password\"\nDB_NAME=\"session_test\"\n```\n\n\n### Running Tests\n\nWith your local environment configured, running tests is as simple as:\n```\nnpm test\n```\n\n\n## Changelog\n\nSee [changelog.md](https://github.com/chill117/express-mysql-session/blob/master/changelog.md)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chill117/express-mysql-session.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "2.0.1"
}
